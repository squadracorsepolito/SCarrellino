/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 38.0.2 Sun Jun 16 16:05:41 2024.
 */

#ifndef NLG5_DATABASE_CAN_H
#define NLG5_DATABASE_CAN_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define NLG5_DATABASE_CAN_NLG5_DIAG_TX_FRAME_ID (0x71au)
#define NLG5_DATABASE_CAN_NLG5_DIAG_RX_FRAME_ID (0x718u)
#define NLG5_DATABASE_CAN_NLG5_ERR_FRAME_ID (0x614u)
#define NLG5_DATABASE_CAN_NLG5_TEMP_FRAME_ID (0x613u)
#define NLG5_DATABASE_CAN_NLG5_ACT_II_FRAME_ID (0x612u)
#define NLG5_DATABASE_CAN_NLG5_ACT_I_FRAME_ID (0x611u)
#define NLG5_DATABASE_CAN_NLG5_ST_FRAME_ID (0x610u)
#define NLG5_DATABASE_CAN_NLG5_CTL_FRAME_ID (0x618u)

/* Frame lengths in bytes. */
#define NLG5_DATABASE_CAN_NLG5_DIAG_TX_LENGTH (8u)
#define NLG5_DATABASE_CAN_NLG5_DIAG_RX_LENGTH (8u)
#define NLG5_DATABASE_CAN_NLG5_ERR_LENGTH (5u)
#define NLG5_DATABASE_CAN_NLG5_TEMP_LENGTH (8u)
#define NLG5_DATABASE_CAN_NLG5_ACT_II_LENGTH (8u)
#define NLG5_DATABASE_CAN_NLG5_ACT_I_LENGTH (8u)
#define NLG5_DATABASE_CAN_NLG5_ST_LENGTH (4u)
#define NLG5_DATABASE_CAN_NLG5_CTL_LENGTH (7u)

/* Extended or standard frame types. */
#define NLG5_DATABASE_CAN_NLG5_DIAG_TX_IS_EXTENDED (0)
#define NLG5_DATABASE_CAN_NLG5_DIAG_RX_IS_EXTENDED (0)
#define NLG5_DATABASE_CAN_NLG5_ERR_IS_EXTENDED (0)
#define NLG5_DATABASE_CAN_NLG5_TEMP_IS_EXTENDED (0)
#define NLG5_DATABASE_CAN_NLG5_ACT_II_IS_EXTENDED (0)
#define NLG5_DATABASE_CAN_NLG5_ACT_I_IS_EXTENDED (0)
#define NLG5_DATABASE_CAN_NLG5_ST_IS_EXTENDED (0)
#define NLG5_DATABASE_CAN_NLG5_CTL_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/**
 * Signals in message NLG5_DIAG_TX.
 *
 * All signal values are as on the CAN bus.
 */
struct nlg5_database_can_nlg5_diag_tx_t {
    /**
     * Diag responded data to host
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t lad_d_param_rp;
};

/**
 * Signals in message NLG5_DIAG_RX.
 *
 * All signal values are as on the CAN bus.
 */
struct nlg5_database_can_nlg5_diag_rx_t {
    /**
     * Diag requested data from host
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t lad_d_param_rq;
};

/**
 * Signals in message NLG5_ERR.
 *
 * All signal values are as on the CAN bus.
 */
struct nlg5_database_can_nlg5_err_t {
    /**
     * battery output overvoltage; error can only be cleared by cycling power ON-OFF-ON
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_e_oov;

    /**
     * Mains overvoltage 2 detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_e_mov_ii;

    /**
     * Mains overvoltage 1 detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_e_mov_i;

    /**
     * power stage short circuit condition detected; error can only be cleared by cycling power ON-OFF-ON
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_e_sc;

    /**
     * plausibility battery output voltage measurement wrong
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_e_p_om;

    /**
     * plausibility mains voltage measurement wrong
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_e_p_mv;

    /**
     * output fuse defective
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_e_of;

    /**
     * Mains fuse defective
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_e_mf;

    /**
     * wrong battery polarity;  error can only be cleared by cycling power ON-OFF-ON
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_e_b_p;

    /**
     * Temperature sensor for prim capacitor defective
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_e_t_c;

    /**
     * Temperature sensor for prim power stage defective
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_e_t_pow;

    /**
     * Temperature sensor for diodes defective
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_e_t_dio;

    /**
     * Temperature sensor for transformer defective
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_e_t_tr;

    /**
     * Ext. temperature sensor 1 defective (if enabled)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_e_t_ext1;

    /**
     * Ext. temperature sensor 2 defective (if enabled)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_e_t_ext2;

    /**
     * Ext. temperature sensor 3 defective (if enabled)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_e_t_ext3;

    /**
     * Flash memory checksum failure
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_e_f_crc;

    /**
     * NVSRAM check sum failure; contains most of the scaling & calibration values, CAN ID's and  charging profile etc.
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_e_nv_crc;

    /**
     * Sys EEPROM checksum failure
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_e_es_crc;

    /**
     * Pow EEPROM checksum failure
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_e_ep_crc;

    /**
     * Internal Watchdog Timeout
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_e_wdt;

    /**
     * Initialization error
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_e_init;

    /**
     * CAN timeout, no control message received for >300ms
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_e_c_to;

    /**
     * CAN off, transmit buffer >255
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_e_c_off;

    /**
     * CAN transmit buffer >127
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_e_c_tx;

    /**
     * CAN receiver buffer >127
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_e_c_rx;

    /**
     * Emergency Shutdown Threshold 'Battery Temperature' is exceeded; see ChargeStar help section 'protective features';  error can only be cleared by cycling power ON-OFF-ON
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_e_sdt_bt;

    /**
     * Emergency Shutdown Threshold 'Battery Voltage' is exceeded; see ChargeStar help section 'protective features';  error can only be cleared by cycling power ON-OFF-ON
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_e_sdt_bv;

    /**
     * Emergency Shutdown Threshold 'Amp Hours' is exceeded; see ChargeStar help section 'protective features';  error can only be cleared by cycling power ON-OFF-ON
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_e_sdt_ah;

    /**
     * Emergency Shutdown Threshold 'Charging Time' is exceeded; see ChargeStar help section 'protective features';  error can only be cleared by cycling power ON-OFF-ON
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_e_sdt_ct;

    /**
     * Output power limited by low mains voltage
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_w_pl_mv;

    /**
     * Output power limited by low battery voltage
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_w_pl_bv;

    /**
     * Output power limited by charger internal overtemperature
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_w_pl_it;

    /**
     * Commanded value is out of specified range; max or min applicable value is assumed instead
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_w_c_vor;

    /**
     * NLG5 Control message not active
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_w_cm_na;

    /**
     * LED Output driver defective, LEDs can´t be controlled by NLG5 anymore. Charging is still possible.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_w_od;

    /**
     * Save-Charging-Mode reduces primary current to 3.95 A as long as one of the four internal temperature sensors indicates -18° C or less.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_w_sc_m;
};

/**
 * Signals in message NLG5_TEMP.
 *
 * All signal values are as on the CAN bus.
 */
struct nlg5_database_can_nlg5_temp_t {
    /**
     * Power stage temperature
     *
     * Range: -400..3000 (-40..300 °C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t nlg5_p_tmp;

    /**
     * Value of external battery temperature sensor #1 (if connected and enabled)
     *
     * Range: -400..3000 (-40..300 °C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t nlg5_tmp_ext1;

    /**
     * Value of external battery temperature sensor #2 (if connected and enabled)
     *
     * Range: -400..3000 (-40..300 °C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t nlg5_temp_ext2;

    /**
     * Value of external battery temperature sensor #3 (if connected and enabled)
     *
     * Range: -400..3000 (-40..300 °C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t nlg5_tmp_ext3;
};

/**
 * Signals in message NLG5_ACT_II.
 *
 * All signal values are as on the CAN bus.
 */
struct nlg5_database_can_nlg5_act_ii_t {
    /**
     * Value of mains current limit, commanded by the control pilot (SAE J1772) signal
     *
     * Range: 0..1000 (0..100 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t nlg5_s_mc_m_cp;

    /**
     * Value of mains current limit, commanded by the 'power indicator' (PI) analog input signal
     *
     * Range: 0..200 (0..20 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t nlg5_s_mc_m_pi;

    /**
     * Aux battery voltage
     *
     * Range: 0..250 (0..25 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t nlg5_abv;

    /**
     * Charge balance obtained via  Ext. Ah counter connected to DI1 / DI2
     *
     * Range: -32768..32767 (-327.68..327.67 Ah)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t nlg5_ahc_ext;

    /**
     * output current of the booster (if one is present and active)
     *
     * Range: 0..5000 (0..50 A)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t nlg5_oc_bo;
};

/**
 * Signals in message NLG5_ACT_I.
 *
 * All signal values are as on the CAN bus.
 */
struct nlg5_database_can_nlg5_act_i_t {
    /**
     * Actual mains current
     *
     * Range: 0..5000 (0..50 A)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t nlg5_mc_act;

    /**
     * Actual mains voltage
     *
     * Range: 0..5000 (0..500 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t nlg5_mv_act;

    /**
     * Actual battery output voltage
     *
     * Range: 0..10000 (0..1000 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t nlg5_ov_act;

    /**
     * output current to the battery
     *
     * Range: 0..15000 (0..150 A)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t nlg5_oc_act;
};

/**
 * Signals in message NLG5_ST.
 *
 * All signal values are as on the CAN bus.
 */
struct nlg5_database_can_nlg5_st_t {
    /**
     * Indicates if hardware enabled, i.e. a hi or lo signal is fed to the 'Power On' pin (pin3 of control connector)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_s_he;

    /**
     * An error has been detected, red LED is ON, no power is output
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_s_err;

    /**
     * Warning condition on, i.e. charging power limited due to any limiting condition; red LED is blinking
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_s_war;

    /**
     * Charger cooling fan is active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_s_fan;

    /**
     * European mains input detected (230V, 50Hz)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_s_eum;

    /**
     * US mains level 1 (120VAC / 60Hz) detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_s_um_i;

    /**
     * US mains level 2 (240VAC / 60Hz) detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_s_um_ii;

    /**
     * Control pilot signal (SAE J1772) detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_s_cp_dt;

    /**
     * Bypass detection bit 1; 00: no bypass, 01: DC bypass detected, 10:AC bypass in phase, 11: AC bypass not in phase
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_s_bpd_i;

    /**
     * Bypass detection bit 2; 00: no bypass, 01: DC bypass detected, 10:AC bypass in phase, 11: AC bypass not in phase
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_s_bpd_ii;

    /**
     * Output power limited by battery output voltage limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_s_l_ov;

    /**
     * Output power limited by battery output current limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_s_l_oc;

    /**
     * Output power limited by mains current limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_s_l_mc;

    /**
     * Output power limited by analog input 'power indicator' (PI) limit
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_s_l_pi;

    /**
     * Output power limited by control pilot signal (SAE J1772)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_s_l_cp;

    /**
     * Output power limited by maximum power capability of NLG5
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_s_l_pmax;

    /**
     * Output power limited by maximum mains current capability of NLG5
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_s_l_mc_max;

    /**
     * Output power limited by maximum output current capability of NLG5
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_s_l_oc_max;

    /**
     * Output power limited by maximum output voltage capability of NLG5
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_s_l_mo_max;

    /**
     * Output power limited by temperature of primary capacitors
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_s_l_t_cprim;

    /**
     * Output power limited by temperature of power stage
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_s_l_t_pow;

    /**
     * Output power limited by temperature of diodes
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_s_l_t_dio;

    /**
     * Output power limited by temperature of transformer
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_s_l_t_tr;

    /**
     * Output power limited by battery temperature
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_s_l_t_batt;

    /**
     * AUX 12 V Automatic Charging Active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_s_aac;
};

/**
 * Signals in message NLG5_CTL.
 *
 * All signal values are as on the CAN bus.
 */
struct nlg5_database_can_nlg5_ctl_t {
    /**
     * Must be ON to enable power stage of the charger
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_c_c_en;

    /**
     * cycle this value 0-1-0 to clear all latched charger errors
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_c_c_el;

    /**
     * special signal to tell a charging station equipped with the Control Pilot interface (SAE J1772) to switch on the facility's ventilation (in order to get rid of battery gases like hydrogen, e.g.)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_c_cp_v;

    /**
     * Enables CP-State C to request mains voltage
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nlg5_c_mr;

    /**
     * Maximum current to be drawn from the mains outlet, usually 16A. Must always contain a valid value in order to keep on charging.
     *
     * Range: 0..500 (0..50 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t nlg5_mc_max;

    /**
     * Desired voltage to be output to the battery. Must always contain a valid value in order to keep on charging.
     *
     * Range: 0..10000 (0..1000 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t nlg5_ov_com;

    /**
     * Desired battery current. Must always contain a valid value in order to keep on charging.
     *
     * Range: 0..1500 (0..150 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t nlg5_oc_com;
};

/**
 * Pack message NLG5_DIAG_TX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int nlg5_database_can_nlg5_diag_tx_pack(
    uint8_t *dst_p,
    const struct nlg5_database_can_nlg5_diag_tx_t *src_p,
    size_t size);

/**
 * Unpack message NLG5_DIAG_TX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int nlg5_database_can_nlg5_diag_tx_unpack(
    struct nlg5_database_can_nlg5_diag_tx_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t nlg5_database_can_nlg5_diag_tx_lad_d_param_rp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_diag_tx_lad_d_param_rp_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_diag_tx_lad_d_param_rp_is_in_range(uint64_t value);

/**
 * Pack message NLG5_DIAG_RX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int nlg5_database_can_nlg5_diag_rx_pack(
    uint8_t *dst_p,
    const struct nlg5_database_can_nlg5_diag_rx_t *src_p,
    size_t size);

/**
 * Unpack message NLG5_DIAG_RX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int nlg5_database_can_nlg5_diag_rx_unpack(
    struct nlg5_database_can_nlg5_diag_rx_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t nlg5_database_can_nlg5_diag_rx_lad_d_param_rq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_diag_rx_lad_d_param_rq_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_diag_rx_lad_d_param_rq_is_in_range(uint64_t value);

/**
 * Pack message NLG5_ERR.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int nlg5_database_can_nlg5_err_pack(
    uint8_t *dst_p,
    const struct nlg5_database_can_nlg5_err_t *src_p,
    size_t size);

/**
 * Unpack message NLG5_ERR.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int nlg5_database_can_nlg5_err_unpack(
    struct nlg5_database_can_nlg5_err_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_e_oov_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_e_oov_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_e_oov_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_e_mov_ii_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_e_mov_ii_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_e_mov_ii_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_e_mov_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_e_mov_i_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_e_mov_i_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_e_sc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_e_sc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_e_sc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_e_p_om_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_e_p_om_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_e_p_om_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_e_p_mv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_e_p_mv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_e_p_mv_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_e_of_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_e_of_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_e_of_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_e_mf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_e_mf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_e_mf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_e_b_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_e_b_p_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_e_b_p_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_e_t_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_e_t_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_e_t_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_e_t_pow_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_e_t_pow_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_e_t_pow_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_e_t_dio_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_e_t_dio_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_e_t_dio_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_e_t_tr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_e_t_tr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_e_t_tr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_e_t_ext1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_e_t_ext1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_e_t_ext1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_e_t_ext2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_e_t_ext2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_e_t_ext2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_e_t_ext3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_e_t_ext3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_e_t_ext3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_e_f_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_e_f_crc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_e_f_crc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_e_nv_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_e_nv_crc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_e_nv_crc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_e_es_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_e_es_crc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_e_es_crc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_e_ep_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_e_ep_crc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_e_ep_crc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_e_wdt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_e_wdt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_e_wdt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_e_init_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_e_init_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_e_init_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_e_c_to_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_e_c_to_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_e_c_to_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_e_c_off_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_e_c_off_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_e_c_off_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_e_c_tx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_e_c_tx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_e_c_tx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_e_c_rx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_e_c_rx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_e_c_rx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_e_sdt_bt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_e_sdt_bt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_e_sdt_bt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_e_sdt_bv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_e_sdt_bv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_e_sdt_bv_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_e_sdt_ah_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_e_sdt_ah_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_e_sdt_ah_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_e_sdt_ct_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_e_sdt_ct_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_e_sdt_ct_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_w_pl_mv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_w_pl_mv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_w_pl_mv_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_w_pl_bv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_w_pl_bv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_w_pl_bv_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_w_pl_it_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_w_pl_it_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_w_pl_it_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_w_c_vor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_w_c_vor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_w_c_vor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_w_cm_na_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_w_cm_na_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_w_cm_na_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_w_od_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_w_od_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_w_od_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_err_nlg5_w_sc_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_err_nlg5_w_sc_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_err_nlg5_w_sc_m_is_in_range(uint8_t value);

/**
 * Pack message NLG5_TEMP.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int nlg5_database_can_nlg5_temp_pack(
    uint8_t *dst_p,
    const struct nlg5_database_can_nlg5_temp_t *src_p,
    size_t size);

/**
 * Unpack message NLG5_TEMP.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int nlg5_database_can_nlg5_temp_unpack(
    struct nlg5_database_can_nlg5_temp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t nlg5_database_can_nlg5_temp_nlg5_p_tmp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_temp_nlg5_p_tmp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_temp_nlg5_p_tmp_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t nlg5_database_can_nlg5_temp_nlg5_tmp_ext1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_temp_nlg5_tmp_ext1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_temp_nlg5_tmp_ext1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t nlg5_database_can_nlg5_temp_nlg5_temp_ext2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_temp_nlg5_temp_ext2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_temp_nlg5_temp_ext2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t nlg5_database_can_nlg5_temp_nlg5_tmp_ext3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_temp_nlg5_tmp_ext3_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_temp_nlg5_tmp_ext3_is_in_range(int16_t value);

/**
 * Pack message NLG5_ACT_II.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int nlg5_database_can_nlg5_act_ii_pack(
    uint8_t *dst_p,
    const struct nlg5_database_can_nlg5_act_ii_t *src_p,
    size_t size);

/**
 * Unpack message NLG5_ACT_II.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int nlg5_database_can_nlg5_act_ii_unpack(
    struct nlg5_database_can_nlg5_act_ii_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t nlg5_database_can_nlg5_act_ii_nlg5_s_mc_m_cp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_act_ii_nlg5_s_mc_m_cp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_act_ii_nlg5_s_mc_m_cp_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_act_ii_nlg5_s_mc_m_pi_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_act_ii_nlg5_s_mc_m_pi_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_act_ii_nlg5_s_mc_m_pi_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_act_ii_nlg5_abv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_act_ii_nlg5_abv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_act_ii_nlg5_abv_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t nlg5_database_can_nlg5_act_ii_nlg5_ahc_ext_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_act_ii_nlg5_ahc_ext_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_act_ii_nlg5_ahc_ext_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t nlg5_database_can_nlg5_act_ii_nlg5_oc_bo_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_act_ii_nlg5_oc_bo_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_act_ii_nlg5_oc_bo_is_in_range(uint16_t value);

/**
 * Pack message NLG5_ACT_I.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int nlg5_database_can_nlg5_act_i_pack(
    uint8_t *dst_p,
    const struct nlg5_database_can_nlg5_act_i_t *src_p,
    size_t size);

/**
 * Unpack message NLG5_ACT_I.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int nlg5_database_can_nlg5_act_i_unpack(
    struct nlg5_database_can_nlg5_act_i_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t nlg5_database_can_nlg5_act_i_nlg5_mc_act_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_act_i_nlg5_mc_act_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_act_i_nlg5_mc_act_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t nlg5_database_can_nlg5_act_i_nlg5_mv_act_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_act_i_nlg5_mv_act_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_act_i_nlg5_mv_act_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t nlg5_database_can_nlg5_act_i_nlg5_ov_act_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_act_i_nlg5_ov_act_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_act_i_nlg5_ov_act_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t nlg5_database_can_nlg5_act_i_nlg5_oc_act_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_act_i_nlg5_oc_act_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_act_i_nlg5_oc_act_is_in_range(int16_t value);

/**
 * Pack message NLG5_ST.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int nlg5_database_can_nlg5_st_pack(
    uint8_t *dst_p,
    const struct nlg5_database_can_nlg5_st_t *src_p,
    size_t size);

/**
 * Unpack message NLG5_ST.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int nlg5_database_can_nlg5_st_unpack(
    struct nlg5_database_can_nlg5_st_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_st_nlg5_s_he_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_st_nlg5_s_he_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_st_nlg5_s_he_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_st_nlg5_s_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_st_nlg5_s_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_st_nlg5_s_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_st_nlg5_s_war_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_st_nlg5_s_war_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_st_nlg5_s_war_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_st_nlg5_s_fan_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_st_nlg5_s_fan_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_st_nlg5_s_fan_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_st_nlg5_s_eum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_st_nlg5_s_eum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_st_nlg5_s_eum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_st_nlg5_s_um_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_st_nlg5_s_um_i_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_st_nlg5_s_um_i_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_st_nlg5_s_um_ii_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_st_nlg5_s_um_ii_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_st_nlg5_s_um_ii_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_st_nlg5_s_cp_dt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_st_nlg5_s_cp_dt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_st_nlg5_s_cp_dt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_st_nlg5_s_bpd_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_st_nlg5_s_bpd_i_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_st_nlg5_s_bpd_i_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_st_nlg5_s_bpd_ii_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_st_nlg5_s_bpd_ii_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_st_nlg5_s_bpd_ii_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_st_nlg5_s_l_ov_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_st_nlg5_s_l_ov_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_st_nlg5_s_l_ov_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_st_nlg5_s_l_oc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_st_nlg5_s_l_oc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_st_nlg5_s_l_oc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_st_nlg5_s_l_mc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_st_nlg5_s_l_mc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_st_nlg5_s_l_mc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_st_nlg5_s_l_pi_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_st_nlg5_s_l_pi_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_st_nlg5_s_l_pi_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_st_nlg5_s_l_cp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_st_nlg5_s_l_cp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_st_nlg5_s_l_cp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_st_nlg5_s_l_pmax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_st_nlg5_s_l_pmax_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_st_nlg5_s_l_pmax_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_st_nlg5_s_l_mc_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_st_nlg5_s_l_mc_max_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_st_nlg5_s_l_mc_max_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_st_nlg5_s_l_oc_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_st_nlg5_s_l_oc_max_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_st_nlg5_s_l_oc_max_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_st_nlg5_s_l_mo_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_st_nlg5_s_l_mo_max_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_st_nlg5_s_l_mo_max_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_st_nlg5_s_l_t_cprim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_st_nlg5_s_l_t_cprim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_st_nlg5_s_l_t_cprim_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_st_nlg5_s_l_t_pow_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_st_nlg5_s_l_t_pow_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_st_nlg5_s_l_t_pow_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_st_nlg5_s_l_t_dio_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_st_nlg5_s_l_t_dio_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_st_nlg5_s_l_t_dio_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_st_nlg5_s_l_t_tr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_st_nlg5_s_l_t_tr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_st_nlg5_s_l_t_tr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_st_nlg5_s_l_t_batt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_st_nlg5_s_l_t_batt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_st_nlg5_s_l_t_batt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_st_nlg5_s_aac_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_st_nlg5_s_aac_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_st_nlg5_s_aac_is_in_range(uint8_t value);

/**
 * Pack message NLG5_CTL.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int nlg5_database_can_nlg5_ctl_pack(
    uint8_t *dst_p,
    const struct nlg5_database_can_nlg5_ctl_t *src_p,
    size_t size);

/**
 * Unpack message NLG5_CTL.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int nlg5_database_can_nlg5_ctl_unpack(
    struct nlg5_database_can_nlg5_ctl_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_ctl_nlg5_c_c_en_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_ctl_nlg5_c_c_en_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_ctl_nlg5_c_c_en_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_ctl_nlg5_c_c_el_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_ctl_nlg5_c_c_el_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_ctl_nlg5_c_c_el_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_ctl_nlg5_c_cp_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_ctl_nlg5_c_cp_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_ctl_nlg5_c_cp_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t nlg5_database_can_nlg5_ctl_nlg5_c_mr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_ctl_nlg5_c_mr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_ctl_nlg5_c_mr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t nlg5_database_can_nlg5_ctl_nlg5_mc_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_ctl_nlg5_mc_max_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_ctl_nlg5_mc_max_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t nlg5_database_can_nlg5_ctl_nlg5_ov_com_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_ctl_nlg5_ov_com_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_ctl_nlg5_ov_com_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t nlg5_database_can_nlg5_ctl_nlg5_oc_com_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double nlg5_database_can_nlg5_ctl_nlg5_oc_com_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool nlg5_database_can_nlg5_ctl_nlg5_oc_com_is_in_range(uint16_t value);


#ifdef __cplusplus
}
#endif

#endif
